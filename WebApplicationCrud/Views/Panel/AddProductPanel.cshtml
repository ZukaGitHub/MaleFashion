

<head>
    <link href="~/css/Panel/AddProduct.css" rel="stylesheet" />
</head>
<body>
    <script src="~/js/VueComponents/DropzoneC.js"></script>
    <div class="wrapper d-flex align-items-stretch">
        <partial name="_AdministrationSidebar">
            <div id="content" class="p-4 p-md-5 pt-5">
                <div class="VueModel">
                    <div id="preloder">
                        <div class="loader"></div>
                    </div>
                    <button class="btn btn-success mt-5 mb-5" v-on:click="AddNewProductInfo()">
                        Add New ProductInfo
                    </button>
                    <div v-for="(productInfo,Index) in ProductInfos">
                        <h3 style="display:inline"> New ProductInfo  (index:{{ Index +1}})  </h3>
                        <span class="float-right btn-danger removeProductBtn" v-on:click="RemoveProductInfo(Index)">X</span>


                        @{
                            List<Brand> Brandss = ViewData["Brandss"] as List<Brand>;
                            List<Category> Categories = ViewData["Categories"] as List<Category>;
                        }
                    <div class="grid-container">

                        <div class="grid-item form-group">
                            <h3>Brands</h3>
                            <ul class="form-check">
                                @for (int i = 0; i < Brandss.Count; i++)
                                {
                                    <li>
                                        <label for="@Brandss[i].name">@Brandss[i].name</label>
                                        <input id="@Brandss[i].name"  type="radio" value="@Brandss[i].name" v-model="productInfo.Brand" />
                                    </li>

                                }
                            </ul>
                        </div>


                        <div class="grid-item form-group">
                            <h3>Categories</h3>
                            <ul>

                                @for (int i = 0; i < Categories.Count; i++)
                                {
                                    <li>
                                        <label for="@Categories[i].name" >@Categories[i].name</label>
                                        <input id="@Categories[i].name"  type="radio" value="@Categories[i].name" v-model="productInfo.Category" />
                                    </li>

                                }
                            </ul>

                        </div>
                        <div class="grid-item product__details__content form-group">
                            <div class="container">
                                <div class="row d-flex justify-content-center">
                                    <div class="col-lg-8">
                                        <div class="product__details__text form-group">
                                            <h4>SalePercentage</h4>
                                            <input class="form-control" type="number" v-model="productInfo.salePercentage" />
                                            @*Name----------------------------------------*@
                                            <h4>name</h4>
                                            <input class="form-control" type="text" v-model="productInfo.name" v-on:input="productInfo.Index=Index" />
                                            @*Price----------------------------------------*@
                                            <h4>Price</h4>
                                            <input class="form-control" type="number" v-model="productInfo.price" />
                                           
                                                @*Tags---------------------------------------------------------------*@
                                                <h4>Tags</h4>
                                                <input class="form-control" type="text" v-model="productInfo.Tagnames" />
                                                <h4>Description</h4>
                                                <input class="form-control" type="text" v-model="productInfo.Description" />
                                          
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                        <div>
                            <div v-for="(ProductDetail,Indexx) in productInfo.ProductDetails">

                                <table>

                                    <tr>
                                        <th>
                                            {{Index +  1 }}
                                            Colors-{{Indexx + 1}}
                                        </th>
                                        <th @*v-if="ProductDetail.Color.length>0"*@>
                                            Sizes

                                        </th>
                                        <th @*v-if="ProductDetail.Sizes.length>0"*@>
                                            Stock
                                        </th>
                                        <th >
                                            Images
                                        </th>

                                    </tr>
                                    <tr>
                                        <td>
                                            <div>
                                                <span class="btn btn-success mt-5 mb-5" v-on:click="AddNewProductDetail(Index)">
                                                    +
                                                </span>
                                                <span class="float-right" style="cursor:pointer" v-on:click="RemoveProductDetail(Indexx,Index)">X</span>

                                                <label>Color</label>
                                                <input v-model="ProductDetail.Color" type="color" v-on:keyup.enter="ProductDetail.Index=Indexx" />

                                            </div>
                                        </td>
                                        <td @*v-if="ProductDetail.Color.length>0"*@>
                                            <div>
                                                <div class="AdminPanelSizes">


                                                    @for (int j = 0; j < Model.Sizes.Count; j++)
                                                    {
                                                        <label>
                                                            <input type="checkbox"
                                                                   value="@Model.Sizes[j].Text" v-model="ProductDetail.Sizes"
                                                                   v-on:change="PopulateStocks(Index,Indexx,this.event)" />

                                                            <span>@Model.Sizes[j].Text</span>
                                                        </label>
                                                    }
                                                </div>
                                            </div>
                                        </td>
                                        <td @*v-if="ProductDetail.Sizes.length>0"*@>
                                            <div>
                                                @*Computed Properties biiiiiiitch*@
                                                <div>
                                                    <div v-for="(sizes,indexxx) in ProductDetail.Sizes">


                                                        {{sizes}}-<input type="number" v-on:input="ProductDetail.stock[indexxx].SizeName=sizes"
                                                                         v-model="ProductDetail.stock[indexxx].number" />



                                                    </div>
                                                </div>
                                            </div>

                                        </td>
                                        @*multiple instances of same components updates only one key*@
                                        <td @*v-if="ProductDetail.stock.length>0"*@>

                                            @*@@dragenter.prevent="toggleActive"
                            @@dragleave.prevent="toggleActive"
                            @@dragover.prevent
                            @@drop.prevent="toggleActive"
                            ::class="{'active-dropzone':ProductDetail.active}"
                                            *@

                                            @*<div v-on:drop="drop(this.event,index,indexx)" v-on:change="SelectFiles(index,indexx,this.event)" :key=Indexx>*@

                                            <div v-on:drop="drop(this.event,Indexx,Index)"
                                                 v-on:change="SelectFiles(Index,Indexx,this.event)"
                                                 @@dragleave.prevent="toggleActive(Index,Indexx)"
                                                 @@dragover.prevent
                                                 @@drop.prevent="toggleActive(Index,Indexx)"
                                                 ::class="{'active-dropzone':ProductDetail.active}"
                                                 class="DropzoneC">

                                                <span>Drag And Drop File</span>
                                                <span>Or</span>
                                                <label for="DropzoneFile">Select File</label>
                                                <input type="file" id="DropzoneFile" class="selectFiles" multiple />
                                            </div>
                                            <div v-for="(File,index) in ProductDetail.dropzoneFiles" class="file-info">
                                                File:{{File.name}}
                                                <span @@click="RemoveImage(this.event,index,Index,Indexx)">X</span>
                                            </div>
                                            <div v-for="(Image,index) in ProductDetail.dropzoneFilesUrl">
                                                <label>
                                                    <input type="radio" :value=index v-model="ProductDetail.Thumbnail" />
                                                    <img :src="Image" />
                                                </label>
                                            </div>
                                        </td>
                                    </tr>

                                </table>
                            </div>
                        </div>
                    </div>

                        @*Submit Button----------------------------------------------*@
                        <button class="btn-danger submitBtn" v-on:click="sendToServer">Submit</button>

                     
                    </div>
                </div>
               </div>
            
</body>




<script defer>
    var app = new Vue({
        el: '.VueModel',

        data: {
            ProductInfos: [
                {
                    name: '',
                    Category: '',
                    price: '',
                    Tagnames: '',
                    Index: '',
                    Brand: '',
                    Description: '',
                    salePercentage: '',
                    ProductDetails: [
                        {
                            Color: '',
                            Sizes: [],
                            Thumbnail: '',
                            stock: [],
                            dropzoneFiles: [],
                            dropzoneFilesUrl: [],
                            Index: '',
                            IndexInfo: '',
                        }
                    ],
                }
            ]
        },

        methods: {
            sendToServer: function () {
                let formdata = new FormData()

                formdata.append('yle', 'lteeeeeee')

                for (let i = 0; i < this.ProductInfos.length; i++) {
                    formdata.append("productVms[" + i + "].name", this.ProductInfos[i].name)
                    formdata.append("productVms[" + i + "].Category", this.ProductInfos[i].Caterogy)
                    formdata.append("productVms[" + i + "].Tagnames", this.ProductInfos[i].Tagnames)
                    formdata.append("productVms[" + i + "].price", this.ProductInfos[i].price)
                    formdata.append("productVms[" + i + "].Brand", this.ProductInfos[i].Brand)
                    formdata.append("productVms[" + i + "].Description", this.ProductInfos[i].Description)
                    formdata.append("productVms[" + i + "].salepercentage", this.ProductInfos[i].salePercentage)
                    for (let j = 0; j < this.ProductInfos[i].ProductDetails.length; j++) {
                        formdata.append("productVms[" + i + "].productInfoVms[" + j + "].color", this.ProductInfos[i].ProductDetails[j].Color)
                        formdata.append("productVms[" + i + "].productInfoVms[" + j + "].sizes", this.ProductInfos[i].ProductDetails[j].Sizes)
                        formdata.append("productVms[" + i + "].productInfoVms[" + j + "].Thumbnail", this.ProductInfos[i].ProductDetails[j].Thumbnail)
                        for (let g = 0; g < this.ProductInfos[i].ProductDetails[j].dropzoneFiles.length; g++) {
                            formdata.append("productVms[" + i + "].productInfoVms[" + j + "].images", this.ProductInfos[i].ProductDetails[j].dropzoneFiles[g])
                        }
                        for (let h = 0; h < this.ProductInfos[i].ProductDetails[j].stock.length; h++) {
                            formdata.append
                                ("productVms[" + i + "].productInfoVms[" + j + "].stockVms[" + h + "].sizeName",
                                    this.ProductInfos[i].ProductDetails[j].stock[h].SizeName)
                            formdata.append
                                ("productVms[" + i + "].productInfoVms[" + j + "].stockVms[" + h + "].number",
                                    this.ProductInfos[i].ProductDetails[j].stock[h].number)
                        }
                    }
                }

                axios({
                    method: 'post',
                    url: '/Panel/AddProductPanel',


                    data: formdata

                })
                    .then(function (response) {
                        Alert("product was added");
                    })
                    .catch(function (error) {
                        console.log(error);
                    });

            },
            drop(e, ProdInfoIndex, ProdDetailsIndex) {
                console.log(e)


                this.ProductInfos[ProdInfoIndex]
                    .ProductDetails[ProdDetailsIndex].
                    dropzoneFiles.push(e.dataTransfer.files[0])

                let url = URL.createObjectURL(e.dataTransfer.files[0])
                this.ProductInfos[ProdInfoIndex]
                    .ProductDetails[ProdDetailsIndex]
                    .dropzoneFilesUrl.push(url)

            },
            SelectFiles(ProdInfoIndex, ProdDetailsIndex, e) {
                console.log(e)
                console.log(ProdInfoIndex, ProdDetailsIndex)

                for (let i = 0; i < e.target.files.length; i++) {

                    this.ProductInfos[ProdInfoIndex].ProductDetails[ProdDetailsIndex].
                        dropzoneFiles.push(e.target.files[i])

                    let url = URL.createObjectURL(e.target.files[i])
                    this.ProductInfos[ProdInfoIndex].ProductDetails[ProdDetailsIndex].
                        dropzoneFilesUrl.push(url)

                }


            },

            AddNewProductInfo: function () {
                this.ProductInfos.push({

                    name: '',
                    Index: '',
                    Category: '',
                    price: '',
                    Tagnames: '',
                    Brand: '',
                    Description: '',
                    ProductDetails: [
                        {
                            Color: '',
                            Sizes: [],
                            stock: [],
                            dropzoneFiles: [],
                            active: false,
                            dropzoneFilesUrl: [],

                            Index: '',
                            IndexInfo: '',



                        }]
                    ,


                })
            },
            PopulateStocks: function (ProdInfoIndex, ProdDetailsIndex, event) {

                console.log(event)
                console.log(ProdInfoIndex, ProdDetailsIndex)
                if (event.target.checked) {
                    this.ProductInfos[ProdInfoIndex]
                        .ProductDetails[ProdDetailsIndex]
                        .stock.push({ SizeName: event.target.value, number: '' })
                }
                else {




                    for (let i = 0; i < this.ProductInfos[ProdInfoIndex]
                        .ProductDetails[ProdDetailsIndex].stock.length; i++) {
                        if (this.ProductInfos[ProdInfoIndex]
                            .ProductDetails[ProdDetailsIndex].stock[i].SizeName == event.target.value) {
                            this.ProductInfos[ProdInfoIndex]
                                .ProductDetails[ProdDetailsIndex].stock.splice(i, 1)
                        }

                    }




                }



            },
            AddNewProductDetail: function (Index) {


                this.ProductInfos[Index].ProductDetails.push({
                    Color: '',
                    Sizes: [],
                    stock: [],
                    dropzoneFiles: [],

                    dropzoneFilesUrl: [],

                    Index: '',
                    IndexInfo: '',


                })
            },
            jandaba: function (e) {
                console.log(e)
            },
            RemoveImage(e, index, ProdInfoIndex, ProdDetailsIndex) {
                this.ProductInfos[ProdInfoIndex].ProductDetails[ProdDetailsIndex].
                    dropzoneFiles.splice(index, 1)
                this.ProductInfos[ProdInfoIndex].ProductDetails[ProdDetailsIndex].
                    dropzoneFilesUrl.splice(index, 1)
                console.log(e)
            },

            RemoveProductInfo(Index) {
                this.ProductInfos.splice(Index, 1)
            },
            RemoveProductDetail(DetailIndex, InfoIndex) {
                console.log()
                this.ProductInfos[InfoIndex].ProductDetails.splice(DetailIndex, 1)
            },

            toggleActive(ProdInfoIndex, ProdDetailIndex) {
                this.ProductInfos[ProdInfoIndex].ProductDetails[ProdDetailIndex].active =
                    !this.ProductInfos[ProdInfoIndex].ProductDetails[ProdDetailIndex].active
            }
        }

    })
</script>
